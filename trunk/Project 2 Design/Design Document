		     +--------------------------+
       	       	     |		CS 570		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

Gabriel Loewen <gloewen@crimson.ua.edu>
Eric Mccary <eamccary@crimson.ua.edu>
Hilary Lattimore <hklattimore@crimson.ua.edu>

---- PRELIMINARIES ----

We had a lot of issues with getting user programs to actually execute.  For some reason virtual address 0x0 in userspace was being mapped without issuing a page fault as is documented in the Pintos documentation.  As a result we were unable to properly load user programs and had to simply comment out the line of code which verifies the validity of the address.  Additionally, we were unable to pass all tests.  Please see the Pintos project 2 output for a list of the tests which passed.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

char *arg;               // Token
char *saveptr;           // Pointer to next token
char *argv[65];          // Vector of arguments
int argc = 0;            // Argument count
char **arg_stack[argc];  // Pointer to the stack of arguments

Three char arrays were created for argument passing.  argv is an array of char* which contains all of the arguments which are passed into the command line.  argv is one of the arguments and is used when parsing the command line input.  saveptr is a pointer to the next argument.  Additionally, argc is the number of arguments which is passed in.  We also create an array, arg_stack which contains pointers to each argument.  We use this to build the stack once the program loading is successful.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Arguments are obtained from the command line input and are arranged as follows:
<program name> <arg1> <arg2> â€¦ <arg n>

So, the first argument follows the program name and this trend continues for each additional argument where the delimiter is a single space, but can be multiple spaces.  We use the provided string function "strtok_r" which takes a string, a delimiter and a pointer which is used to record the progress of parsing the string input.  The following code is used to parse the command line arguments:

  /* Get a copy of the file name */
  char *fn = malloc(strlen(file_name) + 1);
  memcpy (fn, file_name, strlen (file_name) + 1);

  /* Tokanize the arguments and add them to the argument vector */
  for (arg = strtok_r(fn, " ", &saveptr);
       arg != NULL;
       arg = strtok_r(NULL,  " ", &saveptr)) {

       /* We want to ignore extra whitespace.  
          So, if the pointer to the next token points
          to a space we want to increase the pointer by 1. */
       while (*(saveptr)==' ') {
          saveptr++;
       }

       if (argc >= 65) { // Let's allow a maximum of 65 arguments.
	  palloc_free_page ((void*)file_name);
          thread_exit();
       }
       
       /* Insert the argument into the list */
       argv[argc++] = arg;

  }

We arbitrarily set a max limit of arguments to 65, which should be more than enough for most uses.
If we have more than 65 arguments than we simply free the page which was previously allocated for the file_name and exit the thread.  

After parsing the arguments we push them to the stack.  We do this by iterating through the list of arguments and for each argument we count the number of characters present.  Now, as a copy the arguments into the stack we know exactly how much space each argument will occupy.  The stack is setup as follows:

     /* Build the stack */
     for (i = argc-1; i >= 0; i--){
	if_.esp = if_.esp - strlen(argv[i])-1;
	strlcpy(if_.esp,argv[i], PGSIZE);
	arg_stack[i] = (char **)if_.esp;
     }

     /* Align the address */
     if_.esp -= 4 - (len + 1) % 4;
     if_.esp -= 4;
     *(int *)(if_.esp) = 0;

     /* Push items into the stack */
     for (i = argc-1; i >= 0; i--){
  	  if_.esp = if_.esp - 4;	
  	  *(void **)if_.esp = (char **)(arg_stack[i]);
     }

     /* Set the stack address */
     if_.esp = if_.esp - 4;
     *(char **)(if_.esp) = if_.esp + 4;
     if_.esp = if_.esp - 4;

     /* Set the argument count */
     *(int *)(if_.esp) = argc;
     if_.esp = if_.esp - 4;

     /* Spoof the return value */
     *(int *)(if_.esp) = 0;

The first part iterates through the array of arguments and allocates enough space to occupy each argument in the stack.  Then the arguments are copied into the stack.  The argument count is then pushed into the stack, followed by a spoofed return value as specified in the pintos documentation.

---- RATIONALE ----

>> A3:: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is safer than using strtok() because it does not maintain the internal state of the parse, and strtok() is not thread safe.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The Unix approach might be better because if the shell separates the commands then the kernel has less work to do.  Also, the shell can filter out anything erroneous beforehand so as to better protect the kernel from receiving bad arguments.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

The syscall_exec, syscall_wait, and syscall_exit utilize pintos process management utilities. The syscall_open, syscall_close, syscall_create, syscall_remove, syscall_filesize, syscall_read, syscall_write, syscall_seek, and syscall_tell all utilize file management some provided by pintos and provided by us. power_off shuts down pintos.

struct fd_elem
	struct associating threads with files; adds fd ID.

struct lock filelock
	Used when reading or writing to a file

static struct list filelist
	List of all open files.

struct file * find_file_by_fd (int fd)
	Returns the file element belonging to the fd_elem returned by find_fd_elem_by_fd.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

We have created a struct fd_elem, which contains a file descriptor, a file, and two list_elem, one which points to the thread which owns the file and the other which is the list element within the file list.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

From the syscall_handler, the pointer *esp is used to determine which system call is being requested. Our syscall_read implementation reads the correct amount of data into the buffer. We then acquire a lock on the file and test the source of the system call to determine where data will be read from and handle appropriately whether STDIN (read from keyboard with input_getc()) or STDOUT (exit (-1)). We then test that the buffer location in memory is in the userspace. Lastly we add the case of reading from a file with the passed in fd argument using our find_file_by_fd() function. We return the the value returned by the file_read() function if it was successful.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The amount of times that we check the page table depends on how many pages the data spans.  If the data spans exactly one page then we will check the page table once.  That would be the minimum number of times.  If, for instance the data spans an entire page and part of another page.  In this case we will check the page table twice.  So, we will check the page table between 1 and 2 times.

If we are only copying 2 bytes of data it is far less likely that we will have to check more than 1 page.  We could improve on this by not checking the page file at all and simply reading/writing until we get a page fault, at which point we could handle it appropriately.  This could allow us to have a best case of 0 page file checks.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Our implementation of "wait" (syscall_wait) calls process_wait(). This function calls find_thread() to find the thread by the tid_t passed into process_wait(). Then checks the thread status, integrity, and return_code, and if these fail, -1 is returned designating that the thread was killed due to an exception.
We then use a semaphore to block the threadand set the return_code. Next we unblock the thread and set the thread 'waiting' and 'file' to true and NULL respectively and return its return_code.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

When we are executing any system call our first course of action is ensure that the system call is valid.  Then we check if the arguments (address pointer, buffer, etc.) are valid.  And then we proceed with the system call and address any errors that might occur during the system call.  So, our approach is to try to avoid errors beforehand so that the primary function of the system call is easily understandable.

When an error has occurred our strategy is to end the process as gracefully as possible.  So, we first close all open files which the process owns and then we set the return code to a negative value which represents that an error has occurred and then we call thread_exit() to ensure that the thread is released from the system.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Our "exec" system call (syscall_exec) calls process_execute which creates a new thread to run the executable.  We first check to make sure that the command line argument was valid in the first place.  If it is valid we attempt to execute the thread and if the execution fails we immediately return -1. If the process execution was successful we wait for the thread to complete by checking the thread status, and calling process_wait if the return_code is invalid until the thread completes.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

In our implementation, a call to "exit" (syscall_exit), all files belonging to a process to reclaim resources. Locks should be previously released in functions where the lock was requested unless an error occurred. Finally, the child's parent should be signaled for completion. 
The parent process should retrieve the child's return_code to ensure the executable was properly loaded and should not return before. Races may occur while waiting for the child and its termination, and the parent's termination and the child's termination if the parent does not wait for the child.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

The choices we made were to prevent users from accessing memory which was not in userspace.  So, as requests for memory were received we first check if the request is for memory within the userspace boundary and if not we immediately call sys_exit(-1) which sets the return code and safely exits the process.  We do this to protect the system from possible kernel panics.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

We chose to allow each process to maintain a list of file descriptors but we also keep a global list of open files.  The advantages are that a process has an easy way to iterated through all files which it currently owns.  However, the complexity comes when trying to map open files to their parent thread.  This is why we also use a global list of files.  If we are given a file descriptor we want to easily be able to determine which thread is using the file.  So, we simply can iterate through the global list and check the thread id associated with each file.  However, this makes keeping the global list and the list for each process difficult to remain in sync.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change this.  We use the default implementation that is provided with Pintos.

